<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Deconstructed Docs</title>
        <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
        <link>http://localhost:8080</link>
        <description>Documentation for the Deconstructed API.</description>
        <pubDate>Tue, 15 Apr 2014 17:00:00 -0700</pubDate>
        <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
        <language>en</language>
        <item>
            <title>Storgie Data Tier</title>
            <link>http://localhost:8080/articles/storgie/</link>
            <pubDate>Tue, 15 Apr 2014 17:00:00 -0700</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/storgie/</guid>
            <author></author>
            <description>&lt;p&gt;The &lt;a href=&quot;http://localhost:8080/articles/storgie/&quot;&gt;Storgie Data
                Tier&lt;/a&gt; provides the intelligent API access to the underlying key value, graph and event storage
                for the Deconstructed System. It acts as a simple facade, with intelligent organization, management,
                maintenance, selection and query of the underlying data collected. The Storgie Data Tier provides this
                data through mechanisms that provide easy access and also data collection.&lt;/p&gt;
            </description>
        </item>
        <item>
            <title>Inbound and Outbound Data</title>
            <link>http://localhost:8080/articles/inbound/</link>
            <pubDate>Sun, 16 Feb 2014 16:00:00 -0800</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/inbound/</guid>
            <author></author>
            <description>&lt;p&gt;The Deconstructed Graph Engine automatically graphs relationships between users and
                devices based on shared user identity values. A user identity value in Deconstructed is called a
                “knownid”. The Engine processes in-bound data in real-time and updates the graph continuously. Devices
                sharing a “knownid” are associated together in the graph.
                When requesting data from the graph, there two domains of data: device-level and user-level (or
                identity-level). Device profiles within the graph contain all of the knownid’s collected from that
                device. User profiles, or “Identities” contain all of the knownid’s for that user across all of their
                devices, as well as all of the devices associated with that user.
                The purpose of the schema is to provide an outline of how to structure data to send to the Deconstructed
                Graph Engine for processing.&lt;/p&gt;
                &lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;h1 id=&quot;data-schema&quot;&gt;Data Schema&lt;/h1&gt;
                &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/inbound/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/inbound/#minimum&quot;&gt;Minimum Inbound Data&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/inbound/#metadata&quot;&gt;Metadata Storage&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;hr&gt;
                &lt;h2 id=&quot;overview&quot;&gt;Overview &amp;amp; Philosophy&lt;/h2&gt;

                &lt;p&gt;The idea behind the Inbound Data Schema isn’t to confine what might be sent to, stored and
                processed. Instead this is set as a guideline of what will be processed. These specific JSON key value
                pairs are values that will be acted upon once received by the Graph Engine.&lt;/p&gt;
                &lt;p&gt;The philosophy is to use the recursive, open ended nature of of JavaScript Object Notation, or
                JSON as an intelligent storage mechanism for data that is sent to the Deconstructed system. By doing so
                we gain the use of JavaScript and the native readability that JavaScript has for JSON but also the mass
                adoption of JSON across many platforms.&lt;/p&gt;
                &lt;h3 id=&quot;sending-inbound-data-to-deconstructed&quot;&gt;Sending Inbound Data to Deconstructed&lt;/h3&gt;
                &lt;p&gt;Sending data to Deconstructed provides several key features, from cross-device identification
                to storing other key pieces of data around geo-location, fences and related information. The options are
                open ended and we’ll be adding more servicse with intelligent processing to the services over time.&lt;/p&gt;
                &lt;h4 id=&quot;minimum&quot;&gt;Minimum Required Inbound Data&lt;/h4&gt;

                &lt;p&gt;At the most basic level there are several required pieces of data. This required data is to
                ensure that any possible 100% matches between devices can be pulled together into an identity. If these
                value pairs are left out of the JSON data that is sent to Deconstructed the identifiers and other data
                will not be processed for the particular collection. At the root level there are two elements that must
                be present. These elements; key and value, are shown below.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                ...all content values go here...
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;When referred to in other documentation, the two domains of identity, device or other elements
                have a key, each are referred to as &lt;em&gt;identity key&lt;/em&gt; or &lt;em&gt;device key&lt;/em&gt;.&lt;/p&gt;
                &lt;p&gt;Also in the value there should be certain elements, many are optional. One of the most
                important, to draw on the functionality of the Deconstructed services, is a pair with a key of &lt;em&gt;knownid&lt;/em&gt;
                and the value of that pair being a list of JSON data pairs that signify keys. This data will be
                cross-correlated against for known identified matches. Here is an example of the baeline JSON with
                values that one could submit for &lt;em&gt;knownid&lt;/em&gt;.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;email-md5-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8d86e026da849d333a518a394bc37e0d&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1dce4e2a445350c5583d4663f9299af3&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;twitter-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;…or…&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a3c86502-8d19-4bfb-9922-25f9ed26cda8&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;7aa1ec01-59a9-4185-a990-38e650b0aebb&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-guid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;4499c77d-6db0-4dd7-b516-b4be0aad49a4&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;&lt;h4 id=&quot;metadata&quot;&gt;Sending Inbound Metadata Store&lt;/h4&gt;
                When sending data to the Deconstructed API additional metadata can be sent along with the standard
                pieces of data. Some elements in that metadata are stored and utilized in a specific way. In the
                sections below some examples of adding metadata to the inbound data are shown.&lt;/p&gt;
                &lt;h5 id=&quot;user-data-store&quot;&gt;User Data Store&lt;/h5&gt;
                &lt;p&gt;One example of metadata that has specific uses, kind of like reserved words in programming
                languages, is the User Data Store metadata. Here’s a complete example with the standard key and knownid
                values included.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;email-md5-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8d86e026da849d333a518a394bc37e0d&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1dce4e2a445350c5583d4663f9299af3&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;twitter-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c7c4&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                &lt;span class=&quot;string&quot;&gt;&quot;ms&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;favCoffeeShopGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;124.1&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Favorite
                Coffee Shop&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;homeLocationGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;125.6&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.2&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;officeLocationGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;125.3&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.3&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Office&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;favoriteDevice&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;iPad&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;mostUsedDevice&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;IBM
                Work Laptop&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;session&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;iPhone&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Tablet&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Samsung S3&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Samsung S3&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                }
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;There are several key pieces of Metadata Store information above. The first three elements are
                what is called &lt;a href=&quot;http://geojson.org/&quot;&gt;Geo JSON&lt;/a&gt;. Some great examples of
                displaying the GeoJSON Data is using &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet.js&lt;/a&gt;.
                The 4th and 5th elements; favoriteDevice and mostUsedDevice are standard string data representing device
                use of the user.&lt;/p&gt;
            </description>
        </item>
        <item>
            <title>Inbound and Outbound Data</title>
            <link>http://localhost:8080/articles/outbound/</link>
            <pubDate>Sun, 16 Feb 2014 16:00:00 -0800</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/outbound/</guid>
            <author></author>
            <description>&lt;p&gt;The Deconstructed Graph Engine automatically graphs relationships between users and
                devices based on shared user identity values. A user identity value in Deconstructed is called a
                “knownid”. The Engine processes in-bound data in real-time and updates the graph continuously. Devices
                sharing a “knownid” are associated together in the graph.
                When requesting data from the graph, there two domains of data: device-level and user-level (or
                identity-level). Device profiles within the graph contain all of the knownid’s collected from that
                device. User profiles, or “Identities” contain all of the knownid’s for that user across all of their
                devices, as well as all of the devices associated with that user.
                The purpose of the schema is to provide an outline of how to structure data to send to the Deconstructed
                Graph Engine for processing.&lt;/p&gt;
                &lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;h1 id=&quot;data-schema&quot;&gt;Data Schema&lt;/h1&gt;
                &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/outbound/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/outbound/#minimum&quot;&gt;Minimum Inbound
                Data&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/outbound/#metadata&quot;&gt;Metadata Storage&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;hr&gt;
                &lt;h2 id=&quot;overview&quot;&gt;Overview &amp;amp; Philosophy&lt;/h2&gt;

                &lt;p&gt;The idea behind the Inbound Data Schema isn’t to confine what might be sent to, stored and
                processed. Instead this is set as a guideline of what will be processed. These specific JSON key value
                pairs are values that will be acted upon once received by the Graph Engine.&lt;/p&gt;
                &lt;p&gt;The philosophy is to use the recursive, open ended nature of of JavaScript Object Notation, or
                JSON as an intelligent storage mechanism for data that is sent to the Deconstructed system. By doing so
                we gain the use of JavaScript and the native readability that JavaScript has for JSON but also the mass
                adoption of JSON across many platforms.&lt;/p&gt;
                &lt;h3 id=&quot;sending-inbound-data-to-deconstructed&quot;&gt;Sending Inbound Data to Deconstructed&lt;/h3&gt;
                &lt;p&gt;Sending data to Deconstructed provides several key features, from cross-device identification
                to storing other key pieces of data around geo-location, fences and related information. The options are
                open ended and we’ll be adding more servicse with intelligent processing to the services over time.&lt;/p&gt;
                &lt;h4 id=&quot;minimum&quot;&gt;Minimum Required Inbound Data&lt;/h4&gt;

                &lt;p&gt;At the most basic level there are several required pieces of data. This required data is to
                ensure that any possible 100% matches between devices can be pulled together into an identity. If these
                value pairs are left out of the JSON data that is sent to Deconstructed the identifiers and other data
                will not be processed for the particular collection. At the root level there are two elements that must
                be present. These elements; key and value, are shown below.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                ...all content values go here...
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;When referred to in other documentation, the two domains of identity, device or other elements
                have a key, each are referred to as &lt;em&gt;identity key&lt;/em&gt; or &lt;em&gt;device key&lt;/em&gt;.&lt;/p&gt;
                &lt;p&gt;Also in the value there should be certain elements, many are optional. One of the most
                important, to draw on the functionality of the Deconstructed services, is a pair with a key of &lt;em&gt;knownid&lt;/em&gt;
                and the value of that pair being a list of JSON data pairs that signify keys. This data will be
                cross-correlated against for known identified matches. Here is an example of the baeline JSON with
                values that one could submit for &lt;em&gt;knownid&lt;/em&gt;.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;email-md5-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8d86e026da849d333a518a394bc37e0d&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1dce4e2a445350c5583d4663f9299af3&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;twitter-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;…or…&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a3c86502-8d19-4bfb-9922-25f9ed26cda8&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;7aa1ec01-59a9-4185-a990-38e650b0aebb&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-guid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;4499c77d-6db0-4dd7-b516-b4be0aad49a4&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;&lt;h4 id=&quot;metadata&quot;&gt;Sending Inbound Metadata Store&lt;/h4&gt;
                When sending data to the Deconstructed API additional metadata can be sent along with the standard
                pieces of data. Some elements in that metadata are stored and utilized in a specific way. In the
                sections below some examples of adding metadata to the inbound data are shown.&lt;/p&gt;
                &lt;h5 id=&quot;user-data-store&quot;&gt;User Data Store&lt;/h5&gt;
                &lt;p&gt;One example of metadata that has specific uses, kind of like reserved words in programming
                languages, is the User Data Store metadata. Here’s a complete example with the standard key and knownid
                values included.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
                &lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;a725e312-fb51-49f8-a101-33301d290236&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; : {
                &lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;email-md5-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8d86e026da849d333a518a394bc37e0d&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;secret-id-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1dce4e2a445350c5583d4663f9299af3&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;twitter-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;dropbox-hash&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;d0c14f38429d9494a96211d660f6a48c7c4&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;github-id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;adron&quot;&lt;/span&gt;
                }
                &lt;span class=&quot;string&quot;&gt;&quot;ms&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;favCoffeeShopGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;124.1&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.4&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Favorite
                Coffee Shop&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;homeLocationGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;125.6&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.2&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Home&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;officeLocationGeoJson&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Feature&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;geometry&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Point&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;coordinates&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;125.3&lt;/span&gt;,
                &lt;span class=&quot;number&quot;&gt;10.3&lt;/span&gt;]
                },
                &lt;span class=&quot;string&quot;&gt;&quot;properties&quot;&lt;/span&gt;: {
                &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Office&quot;&lt;/span&gt;
                }
                },
                &lt;span class=&quot;string&quot;&gt;&quot;favoriteDevice&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;iPad&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;mostUsedDevice&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;IBM
                Work Laptop&quot;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&quot;session&quot;&lt;/span&gt;:{
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;iPhone&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Tablet&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Samsung S3&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;session-device&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android
                Samsung S3&quot;&lt;/span&gt;
                &lt;span class=&quot;string&quot;&gt;&quot;a29bc541-d8d2-4b16-871e-b09357d6121ba9c13dfd-e359-4e5b-9cd8-66c3f13fb7c4&quot;&lt;/span&gt;
                }
                }
                }
                }
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;There are several key pieces of Metadata Store information above. The first three elements are
                what is called &lt;a href=&quot;http://geojson.org/&quot;&gt;Geo JSON&lt;/a&gt;. Some great examples of
                displaying the GeoJSON Data is using &lt;a href=&quot;http://leafletjs.com/&quot;&gt;Leaflet.js&lt;/a&gt;.
                The 4th and 5th elements; favoriteDevice and mostUsedDevice are standard string data representing device
                use of the user.&lt;/p&gt;
            </description>
        </item>
        <item>
            <title>Deconstructed Key Concepts</title>
            <link>http://localhost:8080/articles/deconstructed/</link>
            <pubDate>Sat, 15 Feb 2014 16:00:00 -0800</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/deconstructed/</guid>
            <author></author>
            <description>&lt;p&gt;At a high level the Deconstructed Platform sits across a multi-region, multi-tier
                architecture that is setup to auto-scale compute, storage and other resources as needed. On the back end
                the platform uses a comobination of storage mechanisms that are also distributed, storing key value,
                graph and event series data. Currently these are the key storage types that provide the functionality
                the storage and retainment facilities the system needs.&lt;/p&gt;
                &lt;div align=&quot;center&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;data-structures.svg&quot;
                width=&quot;100%&quot;&gt;&lt;/img&gt;&lt;/div&gt;

                &lt;p&gt;The Deconstructed Platform is made up of multiple layers distributed across a number of
                multi-server nodes that can scale horizontally and vertically as demand is increased or decreased. These
                layers can be broken down vertically into logical layers, from top to bottom as:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;Clients (Built, controlled, maintained or managed by clients or Deconstructed)&lt;/li&gt;
                &lt;li&gt;SDKs or access tooling to the Deconstructed APIs.&lt;/li&gt;
                &lt;li&gt;APIs and Real-time streams to provide read/write access and query to data.&lt;/li&gt;
                &lt;li&gt;Graph Engine providing data collation, processing, logic and identity consociation.&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;https://github.com/Deconstructed/Storgie&quot;&gt;Storgie&lt;/a&gt; is the
                storage facade that provides the logical data transfer style objects to, from and for the consociation.&lt;/li&gt;
                &lt;li&gt;Data storage. This is the tier providing key value, graph and event based storage to the
                system, specifically to Storgie.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;h1 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h1&gt;
                &lt;p&gt;The key data structures that underpin the storage system for the Deconstructed Platform include
                key value, graph and event storage.&lt;/p&gt;
                &lt;div align=&quot;center&quot;&gt;&lt;img align=&quot;middle&quot; src=&quot;storgie-flow.svg&quot;
                width=&quot;100%&quot;&gt;&lt;/img&gt;&lt;/div&gt;</description>
        </item>
        <item>
            <title>High Level Architecture</title>
            <link>http://localhost:8080/articles/system-elements/</link>
            <pubDate>Sat, 15 Feb 2014 16:00:00 -0800</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/system-elements/</guid>
            <author></author>
            <description>&lt;p&gt;At a high level the Deconstructed Platform sits across a multi-region, multi-tier
                architecture that is setup to auto-scale compute, storage and other resources as needed. On the back end
                the platform uses a comobination of storage mechanisms that are also distributed, storing key value,
                graph and event series data. Currently these are the key storage types that provide the &lt;a href=&quot;http://localhost:8080/articles/consociation/&quot;&gt;consociation&lt;/a&gt;
                &lt;a href=&quot;http://www.merriam-webster.com/dictionary/consociation&quot;&gt;(definition of
                consociation)&lt;/a&gt; functionality the storage and retainment facilities the system needs.&lt;/p&gt;
                &lt;p&gt;The Deconstructed Platform is made up of multiple layers distributed across a number of
                multi-server nodes that can scale horizontally and vertically as demand is increased or decreased. These
                layers can be broken down vertically into logical layers, from top to bottom as:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;Clients (Built, controlled, maintained or managed by clients or Deconstructed Inc.)&lt;/li&gt;
                &lt;li&gt;SDKs or access tooling to the Deconstructed APIs.&lt;/li&gt;
                &lt;li&gt;APIs and Real-time streams to provide read/write access and query to data.&lt;/li&gt;
                &lt;li&gt;Consociation Engine providing data collation, processing, logic and identity convergence.&lt;/li&gt;
                &lt;li&gt;Storgie is the storage facade that provides the logical data transfer style objects to, from
                and for the consociation.&lt;/li&gt;
                &lt;li&gt;Data storage. This is the tier providing key value, graph and event based storage to the
                system, specifically to Storgie.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;h1 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h1&gt;
                &lt;p&gt;The key data structures that underpin the storage system for the Deconstructed Platform include
                key value, graph and event storage. These mechanisms are provided to the Storgie data tier which
                provides them via APIs for client systems and for the &lt;a href=&quot;http://localhost:8080/articles/consociation/&quot;&gt;Consociation
                Engine&lt;/a&gt;. The &lt;a href=&quot;http://localhost:8080/articles/storgie/&quot;&gt;Storgie Data
                Tier&lt;/a&gt;&lt;/p&gt;
                &lt;p&gt;&lt;img src=&quot;data-structures.svg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/img&gt;&lt;/p&gt;
                &lt;p&gt;&lt;img src=&quot;storgie-simple-architecture.svg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/img&gt;&lt;/p&gt;
                &lt;p&gt;&lt;img src=&quot;storgie-flow.svg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/img&gt;&lt;/p&gt;
            </description>
        </item>
        <item>
            <title>API Docs</title>
            <link>http://localhost:8080/articles/api-docs/</link>
            <pubDate>Fri, 14 Feb 2014 16:00:00 -0800</pubDate>
            <guid isPermaLink="true">http://localhost:8080/articles/api-docs/</guid>
            <author></author>
            <description>&lt;p&gt;The Deconstructed APIs are an extremely simple way to manage known identities across
                devices. Devices are collected via the device services, with the Deconstructed service working in
                real-time to pull those correlated devices together to form complete identities for management of
                identity profiles across devices.&lt;/p&gt;
                &lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;h1 id=&quot;apis&quot;&gt;APIs&lt;/h1&gt;
                &lt;ul&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/api-docs/#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/api-docs/#device&quot;&gt;Device API Services&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a href=&quot;http://localhost:8080/articles/api-docs/#identity&quot;&gt;Identity API
                Services&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;hr&gt;
                &lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

                &lt;h3 id=&quot;philosophy&quot;&gt;Philosophy&lt;/h3&gt;

                &lt;p&gt;The idea behind the API services is to provide a simple RESTful style interface for interaction
                with client mobile apps, native interfaces, browser based clients or whatever might make use of this
                data identity.&lt;/p&gt;
                &lt;h2 id=&quot;device&quot;&gt;device&lt;/h2&gt;

                &lt;p&gt;The root of all API calls are located at &lt;a href=&quot;http://api.deconstructed.io/&quot;&gt;http://api.deconstructed.io/&lt;/a&gt;.
                The following are all listed with the root assumed to be this URI. All paths are then appended to this
                root. Each API call is accessed via an access token for your particular account. This value is appended
                to the URI with a parameter variable access_token=123456789.&lt;/p&gt;
                &lt;h3 id=&quot;-device-&quot;&gt;/device/&lt;/h3&gt;
                &lt;p&gt;Post to this path to add device specific user identifying data that will be used to identify a
                new device and user. This is the single end point to send data that will be tracked, managed and
                processed with the identity engine. For an example of JSON data to pass into the services check out the
                &lt;a href=&quot;http://localhost:8080/articles/inbound-data-schema/&quot;&gt;Inbound Data Schema&lt;/a&gt;.&lt;/p&gt;
                &lt;p&gt;Examples of this path include:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;curl -u username:password -X POST -H &amp;quot;Content-Type: application/json&amp;quot;
                -d &amp;#39;{&amp;quot;key&amp;quot;:&amp;quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&amp;quot;, &amp;quot;value&amp;quot;:{&amp;quot;knownid&amp;quot;
                : {&amp;quot;ID&amp;quot; : &amp;quot;c625e601-fb42-40f8-a101-33301d290596&amp;quot;}}}&amp;#39;
                http://api.deconstructed.io/device
                &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Example results would look like this, with the key being returned when
                the write is successful.&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;:
                &lt;span class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;};
                &lt;/code&gt;&lt;/pre&gt;
                &lt;h3 id=&quot;-device-by&quot;&gt;/device/by&lt;/h3&gt;
                &lt;p&gt;Issuing an HTTP POST against this route and including a body (-d with a curl command) of JSON
                parameters will return the device or devices that match the criteria passed in. The passed in data can
                be either deviceid or knownid but not both. Examples of curling this path include:&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;curl -u username:password -X POST -H &amp;quot;Content-Type: application/json&amp;quot;
                -d &amp;#39;**&amp;#39; http://api.deconstructed.io/device/by
                &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the data (** above) is passed (via -d with a curl command) the
                following would be passed based on what type of information will be used to find data by. There are
                several ways to pass data to get device data by, currenlty this includes:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;deviceid: This is the ID that the system uses to track and find the device records association
                to a single device in the system.&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span
                class=&quot;string&quot;&gt;&quot;deviceid&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;/li&gt;
                &lt;li&gt;knownid: This can be one or more IDs associated to the IDs tracked against identities.
                [Currently unreleased feature]&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:&lt;span
                class=&quot;string&quot;&gt;&quot;{&quot;&lt;/span&gt;ID&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;c625e601-fb42-&lt;span
                class=&quot;number&quot;&gt;40&lt;/span&gt;f8-a101-&lt;span class=&quot;number&quot;&gt;33301&lt;/span&gt;d290596&lt;span
                class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;emailId&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;foo@bar.com&lt;span
                class=&quot;string&quot;&gt;&quot;}&quot;&lt;/span&gt;}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;/li&gt;
                &lt;/ul&gt;
                &lt;p&gt;Example results would look like:&lt;/p&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;:&lt;span
                class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;, &lt;span
                class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;:{&lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;
                : {&lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;}}}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;&lt;h2 id=&quot;identity&quot;&gt;Identity&lt;/h2&gt;&lt;/p&gt;
                &lt;h3 id=&quot;-identity-by&quot;&gt;/identity/by&lt;/h3&gt;
                &lt;p&gt;This API route provides a query interface very similar to the device by search query interface
                except that it has an additional parameter option (identitykey) provides only a single element in
                response for any of the keys. As it returns the data for the device in a post consociated state after a
                convergence of the data has occurred. The converged by end point provides information&lt;/p&gt;
                &lt;pre&gt;&lt;code&gt;curl -u username:password -X POST -H &amp;quot;Content-Type: application/json&amp;quot;
                -d &amp;#39;&amp;#39; http://api.deconstructed.io/identity/by
                &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where the data is passed (via -d with a curl command) the following
                would be passed based on what type of information will be used to find data by. There are several ways
                to pass data to get device data by, currenlty this includes:&lt;/p&gt;
                &lt;ul&gt;
                &lt;li&gt;identitykey: This is the ID that the system uses to track and find the profile records
                association to an individual device in the system.&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span
                class=&quot;string&quot;&gt;&quot;identitykey&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;/li&gt;
                &lt;li&gt;devicekey: This is the ID that the system uses to track individual devices and can be used to
                find an identity by since the identitykey goes along with converged data when it is graphed together to
                form a complete identity.&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;devicekey&quot;&lt;/span&gt;:&lt;span
                class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;/li&gt;
                &lt;li&gt;knownid: This can be one or more IDs associated to the IDs tracked against devices.&lt;pre&gt;&lt;code
                class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;:&lt;span
                class=&quot;string&quot;&gt;&quot;{&quot;&lt;/span&gt;ID&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;c625e601-fb42-&lt;span
                class=&quot;number&quot;&gt;40&lt;/span&gt;f8-a101-&lt;span class=&quot;number&quot;&gt;33301&lt;/span&gt;d290596&lt;span
                class=&quot;string&quot;&gt;&quot;,&quot;&lt;/span&gt;emailId&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;foo@bar.com&lt;span
                class=&quot;string&quot;&gt;&quot;}&quot;&lt;/span&gt;}
                &lt;/code&gt;&lt;/pre&gt;
                In return a result might look like this:&lt;/li&gt;
                &lt;/ul&gt;
                &lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;:&lt;span
                class=&quot;string&quot;&gt;&quot;06e5140d-fa4e-4758-8d9d-e707bd19880d&quot;&lt;/span&gt;, &lt;span
                class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;:{&lt;span class=&quot;string&quot;&gt;&quot;knownid&quot;&lt;/span&gt;
                : {&lt;span class=&quot;string&quot;&gt;&quot;ID&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;c625e601-fb42-40f8-a101-33301d290596&quot;&lt;/span&gt;}}}
                &lt;/code&gt;&lt;/pre&gt;
                &lt;p&gt;If other profile device information has been added to this device through convergence in
                identity the data could have a number of other known IDs and related metadata.&lt;/p&gt;
            </description>
        </item>
    </channel>
</rss>